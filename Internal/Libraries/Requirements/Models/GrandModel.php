<?php namespace ZN\Requirements\Models;

use CallController, DB, DBTool, DBForge, Arrays, Exception, Config;

class GrandModel extends CallController
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Copyright  : (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    //--------------------------------------------------------------------------------------------------------
    // Variable Grand Table
    //--------------------------------------------------------------------------------------------------------
    //
    // @var string: empty
    //
    //--------------------------------------------------------------------------------------------------------
    protected $grandTable = '';

    //--------------------------------------------------------------------------------------------------------
    // Constructor
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function __construct()
    {
        if( defined('static::connection') )
        {
            Config::set('Database', 'database', static::connection);
        }

        if( defined('static::table') )
        {
            $grandTable = static::table;
        }
        else
        {
            $grandTable = divide(str_ireplace([INTERNAL_ACCESS, 'Grand'], '', get_called_class()), '\\', -1);
        }

        $this->grandTable = strtolower($grandTable);

        $tables = DBTool::listTables();

        if( ! in_array($this->grandTable, Arrays::map('strtolower', $tables)) )
        {
            throw new Exception(lang('Database', 'tableNotExistsError', 'Grand: '.$grandTable));
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Insert
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $data: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function insert(Array $data) : Bool
    {
        return DB::insert($this->grandTable, $data);
    }

    //--------------------------------------------------------------------------------------------------------
    // Insert ID
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function insertID() : Int
    {
        return DB::insertID();
    }

    //--------------------------------------------------------------------------------------------------------
    // Is Exists
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $column
    // @param string $value
    //
    //--------------------------------------------------------------------------------------------------------
    public function isExists(String $column, String $value) : Bool
    {
        return DB::isExists($this->grandTable, $column, $value);
    }

    //--------------------------------------------------------------------------------------------------------
    // Select
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed $select: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function select(...$select) : Grand
    {
        DB::select(...$select);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Update
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $data: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function update(Array $data, String $column, String $value) : Bool
    {
        return DB::where($column, $value)->update($this->grandTable, $data);
    }

    //--------------------------------------------------------------------------------------------------------
    // Delete
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $column: empty
    // @param string $value : empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function delete(String $column, String $value) : Bool
    {
        return DB::where($column, $value)->delete($this->grandTable);
    }

    //--------------------------------------------------------------------------------------------------------
    // Protected Get
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    protected function _get()
    {
        return DB::get($this->grandTable);
    }

    //--------------------------------------------------------------------------------------------------------
    // Columns
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function columns() : Array
    {
        return $this->_get()->columns();
    }

    //--------------------------------------------------------------------------------------------------------
    // Total Columns
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function totalColumns() : Int
    {
        return $this->_get()->totalColumns();
    }

    //--------------------------------------------------------------------------------------------------------
    // Row
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed $printable: false
    //
    //--------------------------------------------------------------------------------------------------------
    public function row($printable = false)
    {
        return $this->_get()->row($printable);
    }

    //--------------------------------------------------------------------------------------------------------
    // Result
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $type: object
    //
    //--------------------------------------------------------------------------------------------------------
    public function result(String $type = 'object')
    {
        return $this->_get()->result($type);
    }

    //--------------------------------------------------------------------------------------------------------
    // Increment
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed $columns  : empty
    // @param int   $increment: 1
    //
    //--------------------------------------------------------------------------------------------------------
    public function increment($columns, Int $increment = 1) : Bool
    {
        return DB::increment($this->grandTable, $columns, $increment);
    }

    //--------------------------------------------------------------------------------------------------------
    // Decrement
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed $columns  : empty
    // @param int   $decrement: 1
    //
    //--------------------------------------------------------------------------------------------------------
    public function decrement($columns, Int $decrement = 1) : Bool
    {
        return DB::decrement($this->grandTable, $columns, $decrement);
    }

    //--------------------------------------------------------------------------------------------------------
    // Status
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $type: row
    //
    //--------------------------------------------------------------------------------------------------------
    public function status(String $type = 'row')
    {
        return DB::status($this->grandTable)->$type();
    }

    //--------------------------------------------------------------------------------------------------------
    // Total Rows
    //--------------------------------------------------------------------------------------------------------
    //
    // @param bool $status: false
    //
    //--------------------------------------------------------------------------------------------------------
    public function totalRows(Bool $status = false) : Int
    {
        return $this->_get()->totalRows($status);
    }

    //--------------------------------------------------------------------------------------------------------
    // Where
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $column : empty
    // @param string $value  : empty
    // @param string $logical: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function where($column, String $value = NULL, String $logical = NULL) : Grand
    {
        DB::where($column, $value, $logical);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Having
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $column : empty
    // @param string $value  : empty
    // @param string $logical: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function having($column, String $value = NULL, String $logical = NULL) : Grand
    {
        DB::having($column, $value, $logical);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Where Group
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array ...$args
    //
    //--------------------------------------------------------------------------------------------------------
    public function whereGroup(...$args) : Grand
    {
        DB::whereGroup(...$args);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Having Group
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array ...$args
    //
    //--------------------------------------------------------------------------------------------------------
    public function havingGroup(...$args) : Grand
    {
        DB::havingGroup(...$args);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Inner Join
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $table      : empty
    // @param string $otherColumn: empty
    // @param string $operator   : empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function innerJoin(String $table, String $otherColumn, String $operator = '=') : Grand
    {
        DB::innerJoin($table, $otherColumn, $operator);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Outer Join
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $table      : empty
    // @param string $otherColumn: empty
    // @param string $operator   : empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function outerJoin(String $table, String $otherColumn, String $operator = '=') : Grand
    {
        DB::outerJoin($table, $otherColumn, $operator);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Left Join
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $table      : empty
    // @param string $otherColumn: empty
    // @param string $operator   : empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function leftJoin(String $table, String $otherColumn, String $operator = '=') : Grand
    {
        DB::leftJoin($table, $otherColumn, $operator);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Right Join
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $table      : empty
    // @param string $otherColumn: empty
    // @param string $operator   : empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function rightJoin(String $table, String $otherColumn, String $operator = '=') : Grand
    {
        DB::rightJoin($table, $otherColumn, $operator);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Join
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $table    : empty
    // @param string $condition: empty
    // @param string $type     : empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function join(String $table, String $condition, String $type = NULL) : Grand
    {
        DB::join($table, $condition, $type);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Duplicate Check
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string ...$args
    //
    //--------------------------------------------------------------------------------------------------------
    public function duplicateCheck(...$args) : Grand
    {
        DB::duplicateCheck(...$args);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Order By
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $condition: empty
    // @param string $type     : empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function orderBy($condition, String $type = NULL) : Grand
    {
        DB::orderBy($condition, $type);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Group By
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string ...$args
    //
    //--------------------------------------------------------------------------------------------------------
    public function groupBy(...$args) : Grand
    {
        DB::groupBy(...$args);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Limit
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed $start: 0
    // @param int   $limit: 0
    //
    //--------------------------------------------------------------------------------------------------------
    public function limit($start = 0, Int $limit = 0) : Grand
    {
        DB::limit($start, $limit);

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Pagination
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $url     : empty
    // @param array  $settings: empty
    // @param bool   $output  : true
    //
    //--------------------------------------------------------------------------------------------------------
    public function pagination(String $url = NULL, Array $settings = [], Bool $output = true)
    {
        return $this->_get()->pagination($url, $settings, $output);
    }

    //--------------------------------------------------------------------------------------------------------
    // Create
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array  $data : empty
    // @param string $extra: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function create(Array $data, $extra = NULL) : Bool
    {
        return DBForge::createTable($this->grandTable, $data, $extra);
    }

    //--------------------------------------------------------------------------------------------------------
    // Drop
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function drop() : Bool
    {
        return DBForge::dropTable($this->grandTable);
    }

    //--------------------------------------------------------------------------------------------------------
    // Truncate
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function truncate() : Bool
    {
        return DBForge::truncate($this->grandTable);
    }

    //--------------------------------------------------------------------------------------------------------
    // Rename
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $newName: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function rename(String $newName) : Bool
    {
        return DBForge::renameTable($this->grandTable, $newName);
    }

    //--------------------------------------------------------------------------------------------------------
    // Add Column
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $column: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function addColumn(Array $column) : Bool
    {
        return DBForge::addColumn($this->grandTable, $column);
    }

    //--------------------------------------------------------------------------------------------------------
    // Drop Column
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $column: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function dropColumn($column) : Bool
    {
        return DBForge::dropColumn($this->grandTable, $column);
    }

    //--------------------------------------------------------------------------------------------------------
    // Modify Column
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $column: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function modifyColumn(Array $column) : Bool
    {
        return DBForge::modifyColumn($this->grandTable, $column);
    }

    //--------------------------------------------------------------------------------------------------------
    // Rename Column
    //--------------------------------------------------------------------------------------------------------
    //
    // @param array $column: empty
    //
    //--------------------------------------------------------------------------------------------------------
    public function renameColumn(Array $column) : Bool
    {
        return DBForge::renameColumn($this->grandTable, $column);
    }

    //--------------------------------------------------------------------------------------------------------
    // Optimize
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function optimize() : String
    {
        return DBTool::optimizeTables($this->grandTable);
    }

    //--------------------------------------------------------------------------------------------------------
    // Repair
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function repair() : String
    {
        return DBTool::repairTables($this->grandTable);
    }

    //--------------------------------------------------------------------------------------------------------
    // Backup
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $fileName: empty
    // @param string $path    : const STORAGE_DIR
    //
    //--------------------------------------------------------------------------------------------------------
    public function backup(String $fileName = NULL, String $path = STORAGE_DIR) : String
    {
        return DBTool::backup($this->grandTable, $fileName, $path);
    }

    //--------------------------------------------------------------------------------------------------------
    // Error
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function error()
    {
        if( $error = DB::error() )
        {
            return $error;
        }
        elseif( $error = DBForge::error() )
        {
            return $error;
        }
        elseif( $error = DBTool::error() )
        {
            return $error;
        }
        else
        {
            return false;
        }
    }
}

class_alias('ZN\Requirements\Models\GrandModel', 'GrandModel');
