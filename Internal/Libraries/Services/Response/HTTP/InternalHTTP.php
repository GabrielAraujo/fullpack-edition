<?php namespace ZN\Services\Response;

use Config, Arrays, Method, CLController;
use ZN\Services\Response\HTTP\Exception\InvalidArgumentException;

class InternalHTTP extends CLController implements InternalHTTPInterface
{
    //--------------------------------------------------------------------------------------------------------
    //
    // Author     : Ozan UYKUN <ozanbote@gmail.com>
    // Site       : www.znframework.com
    // License    : The MIT License
    // Copyright  : (c) 2012-2016, znframework.com
    //
    //--------------------------------------------------------------------------------------------------------

    const config = 'Services:http';

    //--------------------------------------------------------------------------------------------------------
    // Settings
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $settings;

    //--------------------------------------------------------------------------------------------------------
    // Types
    //--------------------------------------------------------------------------------------------------------
    //
    // @var array
    //
    //--------------------------------------------------------------------------------------------------------
    protected $types =
    [
        'post',
        'get',
        'env',
        'server',
        'request'
    ];

    //--------------------------------------------------------------------------------------------------------
    // Is Invalid Request
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function isInvalidRequest() : Bool
    {
        $request = Method::request();

        if( count($request) === 1 )
        {
            $requestKey = key($request);

           if( stristr($requestKey, CURRENT_PROJECT) )
           {
                $request = [];
           }
        }

        return ( ! empty($request) && ! server('referer') && $this->isCurl() === false );
    }

    //--------------------------------------------------------------------------------------------------------
    // Is Ajax
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function isAjax() : Bool
    {
        if( isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest' )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //--------------------------------------------------------------------------------------------------------
    // Is Curl
    //--------------------------------------------------------------------------------------------------------
    //
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function isCurl() : Bool
    {
        return ! empty($_SERVER['HTTP_COOKIE'])
               ? false
               : true;
    }

    //--------------------------------------------------------------------------------------------------------
    // Browser Lang
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $default tr
    // @param void
    //
    //--------------------------------------------------------------------------------------------------------
    public function browserLang(String $default = 'en') : String
    {
        $languages = Config::get('Language', 'shortCodes');

        $lang = strtolower(substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2));

        if( isset($languages[$lang]) )
        {
            return strtolower($lang);
        }

        return $default;
    }

    //--------------------------------------------------------------------------------------------------------
    // Code
    //--------------------------------------------------------------------------------------------------------
    //
    // @param numeric $code
    //
    //--------------------------------------------------------------------------------------------------------
    public function code($code = 200) : String
    {
        $messages = Arrays::multikey(SERVICES_HTTP_CONFIG['messages']);

        if( isset($messages[$code]) )
        {
            return $messages[$code];
        }

        return false;
    }

    //--------------------------------------------------------------------------------------------------------
    // Message
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $message
    //
    //--------------------------------------------------------------------------------------------------------
    public function message(String $message) : String
    {
        return $this->code($message);
    }

    //--------------------------------------------------------------------------------------------------------
    // Name
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function name(String $name) : InternalHTTP
    {
        $this->settings['name'] = $name;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Value
    //--------------------------------------------------------------------------------------------------------
    //
    // @param mixed $value
    //
    //--------------------------------------------------------------------------------------------------------
    public function value($value) : InternalHTTP
    {
        $this->settings['value'] = $value;

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Input
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $input
    //
    //--------------------------------------------------------------------------------------------------------
    public function input(String $input) : InternalHTTP
    {
        if( in_array($input, $this->types) )
        {
            $this->settings['input'] = $input;
        }
        else
        {
            throw new InvalidArgumentException('Error', 'invalidInput', $input.' : get, post, server, env, request');
        }

        return $this;
    }

    //--------------------------------------------------------------------------------------------------------
    // Select
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function select(String $name = NULL)
    {
        $name  = $this->settings['name']  ?? $name;
        $input = $this->settings['input'] ?? false;

        $this->settings = [];

        return Method::$input($name);
    }

    //--------------------------------------------------------------------------------------------------------
    // Insert
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $name
    // @param string $value
    //
    //--------------------------------------------------------------------------------------------------------
    public function insert(String $name = NULL, $value = NULL) : Bool
    {
        $name  = $this->settings['name']  ?? $name;
        $input = $this->settings['input'] ?? false;
        $value = $this->settings['value'] ?? $value;

        $this->settings = [];

        return Method::$input($name, $value);
    }

    //--------------------------------------------------------------------------------------------------------
    // Delete
    //--------------------------------------------------------------------------------------------------------
    //
    // @param string $name
    //
    //--------------------------------------------------------------------------------------------------------
    public function delete(String $name = NULL) : Bool
    {
        $name  = $this->settings['name']  ?? $name;
        $input = $this->settings['input'] ?? false;

        $this->settings = [];

        switch( $input )
        {
            case 'post'    : unset($_POST[$name]);    break;
            case 'get'     : unset($_GET[$name]);     break;
            case 'env'     : unset($_ENV[$name]);     break;
            case 'server'  : unset($_SERVER[$name]);  break;
            case 'request' : unset($_REQUEST[$name]); break;
        }

        return true;
    }
}
